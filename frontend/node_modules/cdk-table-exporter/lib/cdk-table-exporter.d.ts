import { EventEmitter, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { ExportType } from './export-type';
import { ExcelOptions, Options, TxtOptions } from './options';
import { DataExtractorService } from './services/data-extractor.service';
import { Exporter } from './services/exporters/exporter';
import { ServiceLocatorService } from './services/service-locator.service';
/**
 * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class CdkTableExporter {
    protected renderer: Renderer2;
    private serviceLocator;
    private dataExtractor;
    protected _cdkTable: any;
    private _exporterService;
    hiddenColumns?: Array<number>;
    exporter?: Exporter<Options>;
    exportCompleted: EventEmitter<void>;
    exportStarted: EventEmitter<void>;
    /**
     * Data array which is extracted from nativeTable
     */
    private _data;
    private _isIterating;
    private _initialPageIndex;
    private _isExporting;
    private _subscription;
    private _options?;
    constructor(renderer: Renderer2, serviceLocator: ServiceLocatorService, dataExtractor: DataExtractorService, _cdkTable: any);
    /**
     * Must return the number of pages of the table
     */
    abstract getPageCount(): number;
    /**
     * Must return the index of the current page that's displayed
     */
    abstract getCurrentPageIndex(): number;
    /**
     * When called, the CdkTable should render the rows inside the page whose index given as parameter
     * @param index page index
     */
    abstract goToPage(index: number): void;
    /**
     * Must return an observable that notifies the subscribers about page changes
     */
    abstract getPageChangeObservable(): Observable<any>;
    /**
     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages
     */
    exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options | ExcelOptions | TxtOptions): void;
    private loadExporter;
    private exportWithPagination;
    private exportSinglePage;
    private extractDataOnCurrentPage;
    private initPageHandler;
    private exportExtractedData;
    private extractSpecialRow;
    private extractTableHeader;
    private extractTableFooter;
    hasNextPage(): boolean;
    nextPage(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CdkTableExporter>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CdkTableExporter, never, never, {
    "hiddenColumns": "hiddenColumns";
    "exporter": "exporter";
}, {
    "exportCompleted": "exportCompleted";
    "exportStarted": "exportStarted";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLXRhYmxlLWV4cG9ydGVyLmQudHMiLCJzb3VyY2VzIjpbImNkay10YWJsZS1leHBvcnRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEV4cG9ydFR5cGUgfSBmcm9tICcuL2V4cG9ydC10eXBlJztcclxuaW1wb3J0IHsgRXhjZWxPcHRpb25zLCBPcHRpb25zLCBUeHRPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcclxuaW1wb3J0IHsgRGF0YUV4dHJhY3RvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGEtZXh0cmFjdG9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFeHBvcnRlciB9IGZyb20gJy4vc2VydmljZXMvZXhwb3J0ZXJzL2V4cG9ydGVyJztcclxuaW1wb3J0IHsgU2VydmljZUxvY2F0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zZXJ2aWNlLWxvY2F0b3Iuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBFeHBvcnRlciBjbGFzcyBmb3IgQ2RrVGFibGUuIEFic3RyYWN0cyB0aGUgdmFyeWluZyBiZWhhdmlvcnMgYW1vbmcgZGlmZmVyZW50IENka1RhYmxlIGltcGxlbWVudGF0aW9ucy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIENka1RhYmxlRXhwb3J0ZXIge1xyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XHJcbiAgICBwcml2YXRlIHNlcnZpY2VMb2NhdG9yO1xyXG4gICAgcHJpdmF0ZSBkYXRhRXh0cmFjdG9yO1xyXG4gICAgcHJvdGVjdGVkIF9jZGtUYWJsZTogYW55O1xyXG4gICAgcHJpdmF0ZSBfZXhwb3J0ZXJTZXJ2aWNlO1xyXG4gICAgaGlkZGVuQ29sdW1ucz86IEFycmF5PG51bWJlcj47XHJcbiAgICBleHBvcnRlcj86IEV4cG9ydGVyPE9wdGlvbnM+O1xyXG4gICAgZXhwb3J0Q29tcGxldGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBleHBvcnRTdGFydGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICAvKipcclxuICAgICAqIERhdGEgYXJyYXkgd2hpY2ggaXMgZXh0cmFjdGVkIGZyb20gbmF0aXZlVGFibGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZGF0YTtcclxuICAgIHByaXZhdGUgX2lzSXRlcmF0aW5nO1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbFBhZ2VJbmRleDtcclxuICAgIHByaXZhdGUgX2lzRXhwb3J0aW5nO1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBfb3B0aW9ucz87XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBzZXJ2aWNlTG9jYXRvcjogU2VydmljZUxvY2F0b3JTZXJ2aWNlLCBkYXRhRXh0cmFjdG9yOiBEYXRhRXh0cmFjdG9yU2VydmljZSwgX2Nka1RhYmxlOiBhbnkpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNdXN0IHJldHVybiB0aGUgbnVtYmVyIG9mIHBhZ2VzIG9mIHRoZSB0YWJsZVxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBnZXRQYWdlQ291bnQoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNdXN0IHJldHVybiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgcGFnZSB0aGF0J3MgZGlzcGxheWVkXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldEN1cnJlbnRQYWdlSW5kZXgoKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGNhbGxlZCwgdGhlIENka1RhYmxlIHNob3VsZCByZW5kZXIgdGhlIHJvd3MgaW5zaWRlIHRoZSBwYWdlIHdob3NlIGluZGV4IGdpdmVuIGFzIHBhcmFtZXRlclxyXG4gICAgICogQHBhcmFtIGluZGV4IHBhZ2UgaW5kZXhcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZ29Ub1BhZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIE11c3QgcmV0dXJuIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB0aGUgc3Vic2NyaWJlcnMgYWJvdXQgcGFnZSBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IGdldFBhZ2VDaGFuZ2VPYnNlcnZhYmxlKCk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgcGFnZSBldmVudCBjaGFpbiB0aHVzIGV4dHJhY3RpbmcgYW5kIGV4cG9ydGluZyBhbGwgdGhlIHJvd3MgaW4gbmF0aXZldGFibGVzIGluIHBhZ2VzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydFRhYmxlKGV4cG9ydFR5cGU/OiBFeHBvcnRUeXBlIHwgJ3hscycgfCAneGxzeCcgfCAnY3N2JyB8ICd0eHQnIHwgJ2pzb24nIHwgJ290aGVyJywgb3B0aW9ucz86IE9wdGlvbnMgfCBFeGNlbE9wdGlvbnMgfCBUeHRPcHRpb25zKTogdm9pZDtcclxuICAgIHByaXZhdGUgbG9hZEV4cG9ydGVyO1xyXG4gICAgcHJpdmF0ZSBleHBvcnRXaXRoUGFnaW5hdGlvbjtcclxuICAgIHByaXZhdGUgZXhwb3J0U2luZ2xlUGFnZTtcclxuICAgIHByaXZhdGUgZXh0cmFjdERhdGFPbkN1cnJlbnRQYWdlO1xyXG4gICAgcHJpdmF0ZSBpbml0UGFnZUhhbmRsZXI7XHJcbiAgICBwcml2YXRlIGV4cG9ydEV4dHJhY3RlZERhdGE7XHJcbiAgICBwcml2YXRlIGV4dHJhY3RTcGVjaWFsUm93O1xyXG4gICAgcHJpdmF0ZSBleHRyYWN0VGFibGVIZWFkZXI7XHJcbiAgICBwcml2YXRlIGV4dHJhY3RUYWJsZUZvb3RlcjtcclxuICAgIGhhc05leHRQYWdlKCk6IGJvb2xlYW47XHJcbiAgICBuZXh0UGFnZSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==